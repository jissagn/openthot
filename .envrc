# This is the .envrc for openthot, for use with direnv (https://direnv.net/)
# It's responsible for enforcing a standard dev environment by checking as much state as possible, and either performing
# initialization (e.g. activating the venv) or giving recommendations on how to reach the desired state.
# It also sets useful environment variables.
# If you'd like to override or set any custom environment variables, this .envrc will read a .env file at the end.

set -e

# we like some colors
bold="$(tput bold)"
red="$(tput setaf 1)"
green="$(tput setaf 2)"
orange="$(tput setaf 3)"
reset="$(tput sgr0)"


info () {
    cat <<EOF
${bold}direnv: ${1}${reset}
EOF
}

warning () {
    cat <<EOF
${orange}${bold}direnv: ${1}${reset}
EOF
}

die () {
    >&2 cat <<EOF
${red}${bold}direnv FATAL: ${1}
${reset}
EOF
    return 1
}


layout_poetry() {
    local VENV=$( poetry show -v|grep "Using virtualenv:"|cut -f 3 -d " " 2>/dev/null)
    export VIRTUAL_ENV=$VENV
    PATH_add "$VIRTUAL_ENV/bin"
}

# ---
# Environment

# don't write *.pyc files; using stale python code occasionally causes subtle problems
export PYTHONDONTWRITEBYTECODE=1

# don't check pypi for a potential new pip version; low-hanging fruit to save a bit of time
export PIP_DISABLE_PIP_VERSION_CHECK=on

# ---
# Python

info "Checking virtualenv ..."

# direnv set -u's, so we need to do this.
VIRTUAL_ENV="${VIRTUAL_ENV:-}"

if [ -n "$VIRTUAL_ENV" ]; then
    # we're enforcing that virtualenv be in .venv
    if [ "$VIRTUAL_ENV" != "${PWD}/.venv" ]; then
        info "You're in a virtualenv, but it's not in the expected location (${PWD}/.venv)"
        layout_poetry
    fi
else
    if [ ! -f ".venv/bin/activate" ]; then
        info "You don't seem to have a virtualenv. Creating it for you..."
        python -m venv .venv
        layout_poetry
    fi
fi

info "Activating $(python -V) virtualenv"
source .venv/bin/activate

# ideally, direnv is able to export PS1 as modified by sourcing venvs
# but we'd have to patch direnv, and ".venv" isn't descriptive anyways
unset PS1
[ "$(command -v python)" != "${PWD}/.venv/bin/python" ] && die "Failed to activate virtualenv."

# # check that openthot is installed
# if [ "$(command -v openthot)" != "${PWD}/.venv/bin/openthot" ]; then
#     info "Your .venv is activated, but «openthot» CLI doesn't seem to be installed. Let's install it."
#     warning "Installation of python packages via poetry might take a while the first time due to dependencies resolution"
#     poetry install --no-cache
# fi

# read .env file if found
if [ -f '.env' ]; then
    info ".env found. Reading it..."
    dotenv .env
fi

cat <<EOF
${green}${bold}direnv: SUCCESS!
${reset}
EOF
